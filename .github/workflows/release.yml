---
name: release
on:  # yamllint disable-line rule:truthy
  workflow_dispatch:
  pull_request:
  push:
    branches:
    - main

env:
  IMAGE_NAME: ${{ github.repository_owner }}/ldap_sync
  DOCKERHUB_ACCOUNT_NAME: determinedai
  EXCHANGE_PATH: /tmp
  EXCHANGE_FILE: image.tar

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      BUILD_TAG: ${{ github.job }}.${{ github.run_id }}
    outputs:
      tag: ${{ env.BUILD_TAG }}
    permissions:
      contents: read
    steps:
      - name: work around github's inability to add a lowercase() function
        run: |
          echo "LC_IMAGE_NAME=${IMAGE_NAME,,}" >> $GITHUB_ENV 
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      #- name: Log in to GitHub Container Registry
      #  uses: docker/login-action@v2 
      #  with:
      #    registry: ghcr.io
      #    username: ${{ github.repository_owner }}
      #    password: ${{ secrets.GITHUB_TOKEN }}
      - name: Build Docker image
        uses: docker/build-push-action@v3
        with:
          push: false
          # note: because this image is exported, we can only build one platform here
          platforms: linux/amd64
          tags: ${{ env.LC_IMAGE_NAME }}:${{ env.BUILD_TAG }}
          #tags: ghcr.io/${{ env.LC_IMAGE_NAME }}:${{ env.BUILD_TAG }}
          #cache-from: type=registry,ref=ghcr.io/${{ env.LC_IMAGE_NAME }}:latest
          #cache-to: type=inline
          cache-from: type=gha
          cache-to: type=gha,mode=max
          outputs: type=docker,dest=${{ env.EXCHANGE_PATH }}/${{ env.EXCHANGE_FILE }}
      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: ${{ env.EXCHANGE_FILE }}
          path: ${{ env.EXCHANGE_PATH }}/${{ env.EXCHANGE_FILE }}

  test_docker_run:
    runs-on: ubuntu-latest
    needs: build
    permissions:
      contents: read
    steps:
      - name: work around github's inability to add a lowercase() function
        run: |
          echo "LC_IMAGE_NAME=${IMAGE_NAME,,}" >> $GITHUB_ENV 
      - name: Download artifact
        uses: actions/download-artifact@v3
        with:
          name: ${{ env.EXCHANGE_FILE }}
          path: ${{ env.EXCHANGE_PATH }}
      - name: Load image
        run: |
          docker load --input ${{ env.EXCHANGE_PATH }}/${{ env.EXCHANGE_FILE }}
          docker image ls -a
      - name: run test
        env:
          SOMEVAR: someval
        run:
          docker run --rm -i $LC_IMAGE_NAME:${{ needs.build.outputs.tag }} /bin/echo "yay"

  # TODO: add an actual test of the script
  test_python_compile:
    runs-on: ubuntu-latest
    needs: build
    permissions:
      contents: read
    steps:
      - name: work around github's inability to add a lowercase() function
        run: |
          echo "LC_IMAGE_NAME=${IMAGE_NAME,,}" >> $GITHUB_ENV 
      - name: Download artifact
        uses: actions/download-artifact@v3
        with:
          name: ${{ env.EXCHANGE_FILE }}
          path: ${{ env.EXCHANGE_PATH }}
      - name: Load image
        run: |
          docker load --input ${{ env.EXCHANGE_PATH }}/${{ env.EXCHANGE_FILE }}
          docker image ls -a
      - name: run test
        run:
          docker run --rm $LC_IMAGE_NAME:${{ needs.build.outputs.tag }} python -m py_compile ldap_sync.py

  release:
    runs-on: ubuntu-latest
    needs:
      - build
      - test_docker_run
      - test_python_compile
    if: ${{ github.ref == 'refs/heads/main' && ( github.event_name == 'push' || github.event_name == 'workflow_dispatch' ) }}
    permissions:
      contents: write
      actions: read
      checks: read
      packages: write
    steps:
      - name: work around github's inability to add a lowercase() function
        run: |
          echo "LC_IMAGE_NAME=${IMAGE_NAME,,}" >> $GITHUB_ENV 
          echo "DOCKERHUB_LC_IMAGE_NAME=${LC_IMAGE_NAME/*\//${DOCKERHUB_USERNAME,,}/}" >> $GITHUB_ENV 

      # create the release
      - name: Checkout
        uses: actions/checkout@v3.3.0
        with:
          fetch-depth: 0 # need all refs for tag generation
      - name: Auto Increment Semver Action
        uses: MCKanpolat/auto-semver-action@1.0.9
        id: versioning
        with:
          releaseType: patch
          # this is a read-only action, I think, so either token is ok
          github_token: ${{ secrets.GITHUB_TOKEN }}
      - name: Commit back
        uses: actions-js/push@v1.4
        with:
          # commit back with Github token to avoid retriggering actions
          github_token: ${{ secrets.GITHUB_TOKEN }}
          message: Release ${{ steps.versioning.outputs.version }}
          branch: main
          tags: true
      - name: Create Github Release
        uses: ncipollo/release-action@v1.12.0
        if: steps['versioning']['outputs']['RETURN_STATUS'] == '0'
        with:
          tag: ${{ steps.versioning.outputs.version }}
          name: ${{ steps.versioning.outputs.version }}
          generateReleaseNotes: True
          #body: Version ${{ steps.versioning.outputs.version }}
          draft: false
          prerelease: false
          # release with PAT to trigger actions on release
          token: ${{ secrets.DETERMINED_TOKEN }}

      # rebuild the container after (we need to know the tag, but we know
      # this will work because it worked in the job we depend upon)
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v2 
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Login to DockerHub
        uses: docker/login-action@v1.14.1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PUBLISH_TOKEN }}
      - name: Download artifact
        uses: actions/download-artifact@v3
        with:
          name: ${{ env.EXCHANGE_FILE }}
          path: ${{ env.EXCHANGE_PATH }}
      - name: Load image
        run: |
          docker load --input ${{ env.EXCHANGE_PATH }}/${{ env.EXCHANGE_FILE }}
          docker image ls -a
      - name: Build Docker image
        uses: docker/build-push-action@v3
        with:
          push: true
          platforms: linux/amd64,linux/arm64,linux/arm/v6,linux/arm/v7
          tags: |
            ghcr.io/${{ env.LC_IMAGE_NAME }}:${{ needs.build.outputs.tag }}
            ghcr.io/${{ env.LC_IMAGE_NAME }}:${{ steps.versioning.outputs.version }}
            ghcr.io/${{ env.LC_IMAGE_NAME }}:latest
            ${{ env.DOCKERHUB_LC_IMAGE_NAME }}:${{ needs.build.outputs.tag }}
            ${{ env.DOCKERHUB_LC_IMAGE_NAME }}:${{ steps.versioning.outputs.version }}
            ${{ env.DOCKERHUB_LC_IMAGE_NAME }}:latest
          #cache-from: type=registry,ref=ghcr.io/${{ env.LC_IMAGE_NAME }}:${{ needs.build.outputs.tag }}
          #cache-to: type=inline
